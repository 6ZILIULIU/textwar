{
  "ver": "1.0.27",
  "uuid": "02eeeded-0b1d-477a-ad46-9704639d1d1d",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  const float PI = 3.14159265359;\n  float aperture = 178.0;\n  float apertureHalf = 0.5 * aperture * (PI / 180.0);\n  float maxFactor = sin(apertureHalf);\n  vec2 uv;\n  vec2 xy = 2.0 * v_uv0.xy - 1.0;\n  float d = length(xy);\n  if (d < (2.0-maxFactor))\n  {\n    d = length(xy * maxFactor);\n    float z = sqrt(1.0 - d * d);\n    float r = atan(d, z) / PI;\n    float phi = atan(xy.y, xy.x);\n    uv.x = r * cos(phi) + 0.5;\n    uv.y = r * sin(phi) + 0.5;\n  }\n  else\n  {\n    uv = v_uv0.xy;\n  }\n  vec4 c = texture2D(texture, uv);\n  gl_FragColor = c;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  const float PI = 3.14159265359;\n  float aperture = 178.0;\n  float apertureHalf = 0.5 * aperture * (PI / 180.0);\n  float maxFactor = sin(apertureHalf);\n  vec2 uv;\n  vec2 xy = 2.0 * v_uv0.xy - 1.0;\n  float d = length(xy);\n  if (d < (2.0-maxFactor))\n  {\n    d = length(xy * maxFactor);\n    float z = sqrt(1.0 - d * d);\n    float r = atan(d, z) / PI;\n    float phi = atan(xy.y, xy.x);\n    uv.x = r * cos(phi) + 0.5;\n    uv.y = r * sin(phi) + 0.5;\n  }\n  else\n  {\n    uv = v_uv0.xy;\n  }\n  vec4 c = texture2D(texture, uv);\n  gl_FragColor = c;\n}"
      }
    }
  ],
  "subMetas": {}
}